{
	"folders":
	[
		{
			"path": ".",
			"folder_exclude_patterns":
			[
				"build",
				"intermediate"
			]
		}
	],
	"build_systems":
	[
		{
			"name": "Game: edit data",
			"shell": true,
			"cmd": ["./edit_data.sh"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: edit metadata",
			"shell": true,
			"cmd": ["./edit_metadata.sh"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: build game",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_game.sh"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: build itests",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_itest.sh"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: build and run",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_game.sh && ./run_game.sh"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "(main_with_flow)",
					"cmd": ["./build_main_with_flow.sh && ./run_game_with_flow.sh"],
				},
				{
					"name": "itests",
					"cmd": ["./build_itest.sh && ./run_itest.sh"],
				}
			]
		},
		{
			"name": "Game: run",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./run_game.sh"],
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: test",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./test.sh -f $file_base_name"],
			// known limitation: last \n won't be detected in build output, so cannot display multi-line errors
			"file_regex": "((?:pico-boots/src|src)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "(solo)",
					"cmd": ["./test.sh -f $file_base_name -m solo"]
				},
				{
					"name": "(all)",
					"cmd": ["./test.sh -f $file_base_name -m all"]
				},
				{
					"name": "*",
					"cmd": ["./test.sh"]
				},
				{
					"name": "* (solo)",
					"cmd": ["./test.sh -m solo"]
				},
				{
					"name": "* (all)",
					"cmd": ["./test.sh -m all"]
				},
				{
					"name": "helper",
					"cmd": ["./test.sh helper"],
				},
				{
					"name": "headless_itests",
					"cmd": ["./test.sh -f headless_itests"],
				},
				{
					"name": "headless_itests (render)",
					"cmd": ["./test.sh -f headless_itests -- --render"],
				},
				{
					"name": "headless_itests - solo",
					"cmd": ["./test.sh -f headless_itests -m solo"],
				},
				{
					"name": "headless_itests - solo (render)",
					"cmd": ["./test.sh -f headless_itests -m solo -- --render"],
				}
			]
		},
		{
			"name": "Engine: test",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["./test.sh -f $file_base_name"],
			// known limitation: last \n won't be detected in build output, so cannot display multi-line errors
			"file_regex": "((?:src)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "(solo)",
					"cmd": ["./test.sh -f $file_base_name -m solo"]
				},
				{
					"name": "(all)",
					"cmd": ["./test.sh -f $file_base_name -m all"]
				},
				{
					"name": "*",
					"cmd": ["./test.sh"]
				},
				{
					"name": "* (solo)",
					"cmd": ["./test.sh -m solo"]
				},
				{
					"name": "* (all)",
					"cmd": ["./test.sh -m all"]
				}
			]
		},
		{
			"name": "All: test",
			"working_dir": "${project_path}",
			"shell": true,
			// note that luacov report is generated in the working directory, so the second test report will overwrite the previous one
			"cmd": ["./test.sh && echo '' && pico-boots/test.sh"],
			// known limitation: last \n won't be detected in build output, so cannot display multi-line errors
			"file_regex": "((?:pico-boots/src|src)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Postbuild: test add_metadata",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_add_metadata"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Postbuild: test add_require",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_add_require"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Postbuild: test minify",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_minify"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
	],
	"syntax_override":
	{
		"\\.lua$":
		[
			// use 1st line if using PICO-8 from Package Control,
			// 2nd line if using version from GitHub (more features)
			"PICO-8/PICO-8"
			// "sublime-PICO-8/PICO-8"
		],
		"\\.luacov":
		[
			"Lua/Lua"
		]
	}
}
